# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import protos.vpsimage.vpsimage_pb2 as vpsimage__pb2


class ImageStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendImage = channel.unary_unary(
                '/vpsimage.Image/SendImage',
                request_serializer=vpsimage__pb2.VpsImageRequest.SerializeToString,
                response_deserializer=vpsimage__pb2.VpsImageResponse.FromString,
                )


class ImageServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SendImage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ImageServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendImage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendImage,
                    request_deserializer=vpsimage__pb2.VpsImageRequest.FromString,
                    response_serializer=vpsimage__pb2.VpsImageResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'vpsimage.Image', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Image(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SendImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vpsimage.Image/SendImage',
            vpsimage__pb2.VpsImageRequest.SerializeToString,
            vpsimage__pb2.VpsImageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class VpsImageStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendVpsImage = channel.unary_unary(
                '/vpsimage.VpsImage/SendVpsImage',
                request_serializer=vpsimage__pb2.VpsImageRequest.SerializeToString,
                response_deserializer=vpsimage__pb2.VpsImageResponse.FromString,
                )


class VpsImageServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SendVpsImage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VpsImageServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendVpsImage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendVpsImage,
                    request_deserializer=vpsimage__pb2.VpsImageRequest.FromString,
                    response_serializer=vpsimage__pb2.VpsImageResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'vpsimage.VpsImage', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class VpsImage(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SendVpsImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vpsimage.VpsImage/SendVpsImage',
            vpsimage__pb2.VpsImageRequest.SerializeToString,
            vpsimage__pb2.VpsImageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class VpsImageStreamStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendVpsStreamImage = channel.stream_stream(
                '/vpsimage.VpsImageStream/SendVpsStreamImage',
                request_serializer=vpsimage__pb2.VpsImageRequest.SerializeToString,
                response_deserializer=vpsimage__pb2.VpsImageResponse.FromString,
                )


class VpsImageStreamServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SendVpsStreamImage(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VpsImageStreamServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendVpsStreamImage': grpc.stream_stream_rpc_method_handler(
                    servicer.SendVpsStreamImage,
                    request_deserializer=vpsimage__pb2.VpsImageRequest.FromString,
                    response_serializer=vpsimage__pb2.VpsImageResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'vpsimage.VpsImageStream', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class VpsImageStream(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SendVpsStreamImage(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/vpsimage.VpsImageStream/SendVpsStreamImage',
            vpsimage__pb2.VpsImageRequest.SerializeToString,
            vpsimage__pb2.VpsImageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class AvailableAreaStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CheckAvailableArea = channel.unary_unary(
                '/vpsimage.AvailableArea/CheckAvailableArea',
                request_serializer=vpsimage__pb2.AvailableAreaRequest.SerializeToString,
                response_deserializer=vpsimage__pb2.AvailableAreaResponse.FromString,
                )


class AvailableAreaServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CheckAvailableArea(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AvailableAreaServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CheckAvailableArea': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckAvailableArea,
                    request_deserializer=vpsimage__pb2.AvailableAreaRequest.FromString,
                    response_serializer=vpsimage__pb2.AvailableAreaResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'vpsimage.AvailableArea', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AvailableArea(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CheckAvailableArea(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vpsimage.AvailableArea/CheckAvailableArea',
            vpsimage__pb2.AvailableAreaRequest.SerializeToString,
            vpsimage__pb2.AvailableAreaResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
